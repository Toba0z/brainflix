{"ast":null,"code":"var _jsxFileName = \"/Users/tobaomo/Documents/BSWeek7PjBrainFlix/brainflix/toba.omoniyi.brainflix/src/components/Comment/Comment.jsx\",\n  _s = $RefreshSig$();\n// Comment.jsx\nimport \"./Comment.scss\";\nimport avatarImage from \"../../assets/Images/Mohan-muruge.jpg\";\nimport commentButtonICon from \"../../assets/Icons/add_comment.svg\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport dateAndTimeOfComment from \"../../Utils/Utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  REACT_APP_BACKEND_URL\n} = process.env;\nconsole.log(\"Testing url from comments posting\", REACT_APP_BACKEND_URL);\n\n// The Comment component receives selectedVideoInfo and setSelectedVideoInfo props for managing video comments\nconst Comment = ({\n  selectedVideoInfo,\n  setSelectedVideoInfo\n}) => {\n  _s();\n  var _selectedVideoInfo$co, _selectedVideoInfo$co2;\n  // State for handling new comment input fields\n  const [newComment, setNewComment] = useState({\n    comment: \"\",\n    name: \"\"\n  });\n\n  // Handles changes in the comment form's input fields and updates the state\n  const handleSelectFormInput = event => {\n    setNewComment({\n      ...newComment,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  // API key for authentication with your backend\n  // const brainFlixApiKey = \"2515aa87-f829-40de-ade0-d0166853f149\";\n  // Handles the submission of a new comment\n\n  const handleSummitComment = async event => {\n    event.preventDefault(); // Prevents the default form submission behavior\n    const videoId = selectedVideoInfo.id; // Retrieves the current video ID\n    const postCommentUrl = `${REACT_APP_BACKEND_URL}/${videoId}/comments`;\n    try {\n      // Submits the new comment to the backend\n      await axios.post(postCommentUrl, {\n        name: newComment.name,\n        comment: newComment.comment\n      });\n\n      // Clears the form fields after successful submission\n      setNewComment({\n        name: \"\",\n        comment: \"\"\n      });\n\n      // Fetches the updated list of comments from the backend\n      const getComment = async () => {\n        const response = await axios.get(`${REACT_APP_BACKEND_URL}/${videoId}`);\n        setSelectedVideoInfo(response.data); // Updates the local state with the new comment data\n      };\n      getComment();\n    } catch (error) {\n      console.error(\"Failed to post this comment:\", error);\n    }\n  };\n\n  // Function to delete a comment\n  const deleteComment = async (videoId, commentId) => {\n    const deleteCommentUrl = `${REACT_APP_BACKEND_URL}/${videoId}/comments/${commentId}`;\n    try {\n      await axios.delete(deleteCommentUrl); // Sends a request to delete the comment\n\n      // Filters out the deleted comment from the current list and updates the state\n      const updateComments = selectedVideoInfo.comments.filter(comment => comment.id !== commentId);\n      setSelectedVideoInfo({\n        ...selectedVideoInfo,\n        comments: updateComments\n      });\n    } catch (error) {\n      console.log(\"Failed to delete comment:\", error);\n    }\n  };\n\n  // Renders the comment section of the component\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"comment\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"comment__title\",\n        children: [(_selectedVideoInfo$co = selectedVideoInfo.comments) === null || _selectedVideoInfo$co === void 0 ? void 0 : _selectedVideoInfo$co.length, \" Comments\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment__container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"comment__avatar\",\n          src: avatarImage,\n          alt: \"Avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSummitComment,\n          className: \"comment__form\",\n          id: \"comment__form\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment__container-form\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"newComment\",\n              className: \"comment__label-form\",\n              children: \"JOIN THE CONVERSATION\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comment__textAreaAndButton\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                onChange: handleSelectFormInput,\n                value: newComment.name,\n                className: \"comment__input\",\n                placeholder: \"Your name\",\n                required: true,\n                id: \"name\",\n                name: \"name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                onChange: handleSelectFormInput,\n                value: newComment.comment,\n                className: \"comment__textarea-form\",\n                placeholder: \"Add a new comment\",\n                required: true,\n                id: \"comment\",\n                name: \"comment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comment__buttonIconStyle\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"comment__upload\",\n                  children: \"COMMENT\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: commentButtonICon,\n                  alt: \"BrainFlix iconbutton\",\n                  className: \"comment__buttonIcon\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"existing__comments\",\n        children: (_selectedVideoInfo$co2 = selectedVideoInfo.comments) === null || _selectedVideoInfo$co2 === void 0 ? void 0 : _selectedVideoInfo$co2.sort((a, b) => b.timestamp - a.timestamp).map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"existing__ids\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"existing__divide\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"existing__innerctn\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"existing__avatar-two\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"existing__details\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"existing__dateName\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"existing__details-name\",\n                  children: comment.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"existing__details-date\",\n                  children: dateAndTimeOfComment(comment.timestamp)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"existing__details-text\",\n                children: comment.comment\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => deleteComment(selectedVideoInfo.id, comment.id),\n                className: \"existing__buttonOne\",\n                children: \"DELETE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 17\n          }, this)]\n        }, comment.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Comment, \"6rRe1SHkHx4i2NST/ZLEm+u2FaA=\");\n_c = Comment;\nexport default Comment;\nvar _c;\n$RefreshReg$(_c, \"Comment\");","map":{"version":3,"names":["avatarImage","commentButtonICon","axios","useState","dateAndTimeOfComment","jsxDEV","_jsxDEV","Fragment","_Fragment","REACT_APP_BACKEND_URL","process","env","console","log","Comment","selectedVideoInfo","setSelectedVideoInfo","_s","_selectedVideoInfo$co","_selectedVideoInfo$co2","newComment","setNewComment","comment","name","handleSelectFormInput","event","target","value","handleSummitComment","preventDefault","videoId","id","postCommentUrl","post","getComment","response","get","data","error","deleteComment","commentId","deleteCommentUrl","delete","updateComments","comments","filter","children","className","length","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","onSubmit","htmlFor","type","onChange","placeholder","required","sort","a","b","timestamp","map","onClick","_c","$RefreshReg$"],"sources":["/Users/tobaomo/Documents/BSWeek7PjBrainFlix/brainflix/toba.omoniyi.brainflix/src/components/Comment/Comment.jsx"],"sourcesContent":["// Comment.jsx\nimport \"./Comment.scss\";\nimport avatarImage from \"../../assets/Images/Mohan-muruge.jpg\";\nimport commentButtonICon from \"../../assets/Icons/add_comment.svg\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport dateAndTimeOfComment from \"../../Utils/Utils\";\n\nconst { REACT_APP_BACKEND_URL } = process.env;\nconsole.log(\"Testing url from comments posting\", REACT_APP_BACKEND_URL);\n\n// The Comment component receives selectedVideoInfo and setSelectedVideoInfo props for managing video comments\nconst Comment = ({ selectedVideoInfo, setSelectedVideoInfo }) => {\n  // State for handling new comment input fields\n  const [newComment, setNewComment] = useState({\n    comment: \"\",\n    name: \"\",\n  });\n\n  // Handles changes in the comment form's input fields and updates the state\n  const handleSelectFormInput = (event) => {\n    setNewComment({ ...newComment, [event.target.name]: event.target.value });\n  };\n\n  // API key for authentication with your backend\n  // const brainFlixApiKey = \"2515aa87-f829-40de-ade0-d0166853f149\";\n  // Handles the submission of a new comment\n\n  const handleSummitComment = async (event) => {\n    event.preventDefault(); // Prevents the default form submission behavior\n    const videoId = selectedVideoInfo.id; // Retrieves the current video ID\n    const postCommentUrl = `${REACT_APP_BACKEND_URL}/${videoId}/comments`;\n\n    try {\n      // Submits the new comment to the backend\n      await axios.post(postCommentUrl, {\n        name: newComment.name,\n        comment: newComment.comment,\n      });\n\n      // Clears the form fields after successful submission\n      setNewComment({ name: \"\", comment: \"\" });\n\n      // Fetches the updated list of comments from the backend\n      const getComment = async () => {\n        const response = await axios.get(`${REACT_APP_BACKEND_URL}/${videoId}`);\n        setSelectedVideoInfo(response.data); // Updates the local state with the new comment data\n      };\n      getComment();\n    } catch (error) {\n      console.error(\"Failed to post this comment:\", error);\n    }\n  };\n\n  // Function to delete a comment\n  const deleteComment = async (videoId, commentId) => {\n    const deleteCommentUrl = `${REACT_APP_BACKEND_URL}/${videoId}/comments/${commentId}`;\n\n    try {\n      await axios.delete(deleteCommentUrl); // Sends a request to delete the comment\n\n      // Filters out the deleted comment from the current list and updates the state\n      const updateComments = selectedVideoInfo.comments.filter(\n        (comment) => comment.id !== commentId\n      );\n      setSelectedVideoInfo({ ...selectedVideoInfo, comments: updateComments });\n    } catch (error) {\n      console.log(\"Failed to delete comment:\", error);\n    }\n  };\n\n  // Renders the comment section of the component\n  return (\n    <>\n      <section className=\"comment\">\n        <h3 className=\"comment__title\">\n          {selectedVideoInfo.comments?.length} Comments\n        </h3>\n        <div className=\"comment__container\">\n          <img className=\"comment__avatar\" src={avatarImage} alt=\"Avatar\" />\n          <form\n            onSubmit={handleSummitComment}\n            className=\"comment__form\"\n            id=\"comment__form\"\n          >\n            <div className=\"comment__container-form\">\n              <label htmlFor=\"newComment\" className=\"comment__label-form\">\n                JOIN THE CONVERSATION\n              </label>\n              <div className=\"comment__textAreaAndButton\">\n                <input\n                  type=\"text\"\n                  onChange={handleSelectFormInput}\n                  value={newComment.name}\n                  className=\"comment__input\"\n                  placeholder=\"Your name\"\n                  required\n                  id=\"name\"\n                  name=\"name\"\n                />\n                <textarea\n                  onChange={handleSelectFormInput}\n                  value={newComment.comment}\n                  className=\"comment__textarea-form\"\n                  placeholder=\"Add a new comment\"\n                  required\n                  id=\"comment\"\n                  name=\"comment\"\n                ></textarea>\n                <div className=\"comment__buttonIconStyle\">\n                  <button className=\"comment__upload\">COMMENT</button>\n                  <img\n                    src={commentButtonICon}\n                    alt=\"BrainFlix iconbutton\"\n                    className=\"comment__buttonIcon\"\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n        </div>\n\n        {/* Renders a list of existing comments, each with a delete button */}\n        <div className=\"existing__comments\">\n          {selectedVideoInfo.comments\n            ?.sort((a, b) => b.timestamp - a.timestamp)\n            .map((comment) => (\n              <div key={comment.id} className=\"existing__ids\">\n                <div className=\"existing__divide\"></div>\n                <div className=\"existing__innerctn\">\n                  <div className=\"existing__avatar-two\"></div>\n                  <div className=\"existing__details\">\n                    <div className=\"existing__dateName\">\n                      <h3 className=\"existing__details-name\">{comment.name}</h3>\n                      <p className=\"existing__details-date\">\n                        {dateAndTimeOfComment(comment.timestamp)}\n                      </p>\n                    </div>\n                    <p className=\"existing__details-text\">{comment.comment}</p>\n                    <button\n                      onClick={() =>\n                        deleteComment(selectedVideoInfo.id, comment.id)\n                      }\n                      className=\"existing__buttonOne\"\n                    >\n                      DELETE\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))}\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Comment;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}