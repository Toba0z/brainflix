{"ast":null,"code":"// const dateAndTimeOfComment = (date) => {\n//         const now = new Date();\n//         const CommentDate = new Date(date);\n//         const differenceInSeconds = Math.round((now - CommentDate) / 1000);\n//         if (differenceInSeconds < 60) {\n//           return `${differenceInSeconds} seconds ago`;\n//         } else if (differenceInSeconds < 3600) {\n//           return `${Math.round(differenceInSeconds / 60)} minutes ago`;\n//         } else if (differenceInSeconds < 86400) {\n//           return `${Math.round(differenceInSeconds / 3600)} hours ago`;\n//         } else if (differenceInSeconds < 2592000) {\n//           return `${Math.round(differenceInSeconds / 86400)} days ago`;\n//         } else if (differenceInSeconds < 31104000) {\n//           return `${Math.round(differenceInSeconds / 2592000)} months ago`;\n//         } else {\n//           return `${Math.round(differenceInSeconds / 31104000)} years ago`;\n//         }\n//       };\n// export default dateAndTimeOfComment; \n\nconst dateAndTimeOfComment = date => {\n  const now = new Date();\n  const CommentDate = new Date(date);\n  // Use Math.ceil to always round up to the next second\n  const differenceInSeconds = Math.ceil((now - CommentDate) / 1000);\n  if (differenceInSeconds < 60) {\n    return `${differenceInSeconds} seconds ago`;\n  } else if (differenceInSeconds < 3600) {\n    return `${Math.ceil(differenceInSeconds / 60)} minutes ago`;\n  } else if (differenceInSeconds < 86400) {\n    return `${Math.ceil(differenceInSeconds / 3600)} hours ago`;\n  } else if (differenceInSeconds < 2592000) {\n    return `${Math.ceil(differenceInSeconds / 86400)} days ago`;\n  } else if (differenceInSeconds < 31104000) {\n    return `${Math.ceil(differenceInSeconds / 2592000)} months ago`;\n  } else {\n    return `${Math.ceil(differenceInSeconds / 31104000)} years ago`;\n  }\n};","map":{"version":3,"names":["dateAndTimeOfComment","date","now","Date","CommentDate","differenceInSeconds","Math","ceil"],"sources":["/Users/tobaomo/Documents/BSWeek7PjBrainFlix/brainflix/toba.omoniyi.brainflix/src/Utils/Utils.js"],"sourcesContent":["\n// const dateAndTimeOfComment = (date) => {\n//         const now = new Date();\n//         const CommentDate = new Date(date);\n//         const differenceInSeconds = Math.round((now - CommentDate) / 1000);\n//         if (differenceInSeconds < 60) {\n//           return `${differenceInSeconds} seconds ago`;\n//         } else if (differenceInSeconds < 3600) {\n//           return `${Math.round(differenceInSeconds / 60)} minutes ago`;\n//         } else if (differenceInSeconds < 86400) {\n//           return `${Math.round(differenceInSeconds / 3600)} hours ago`;\n//         } else if (differenceInSeconds < 2592000) {\n//           return `${Math.round(differenceInSeconds / 86400)} days ago`;\n//         } else if (differenceInSeconds < 31104000) {\n//           return `${Math.round(differenceInSeconds / 2592000)} months ago`;\n//         } else {\n//           return `${Math.round(differenceInSeconds / 31104000)} years ago`;\n//         }\n//       };\n// export default dateAndTimeOfComment; \n\n      \n\n\n\nconst dateAndTimeOfComment = (date) => {\n  const now = new Date();\n  const CommentDate = new Date(date);\n  // Use Math.ceil to always round up to the next second\n  const differenceInSeconds = Math.ceil((now - CommentDate) / 1000);\n  \n  if (differenceInSeconds < 60) {\n    return `${differenceInSeconds} seconds ago`;\n  } else if (differenceInSeconds < 3600) {\n    return `${Math.ceil(differenceInSeconds / 60)} minutes ago`;\n  } else if (differenceInSeconds < 86400) {\n    return `${Math.ceil(differenceInSeconds / 3600)} hours ago`;\n  } else if (differenceInSeconds < 2592000) {\n    return `${Math.ceil(differenceInSeconds / 86400)} days ago`;\n  } else if (differenceInSeconds < 31104000) {\n    return `${Math.ceil(differenceInSeconds / 2592000)} months ago`;\n  } else {\n    return `${Math.ceil(differenceInSeconds / 31104000)} years ago`;\n  }\n};\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA,MAAMA,oBAAoB,GAAIC,IAAI,IAAK;EACrC,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;EACtB,MAAMC,WAAW,GAAG,IAAID,IAAI,CAACF,IAAI,CAAC;EAClC;EACA,MAAMI,mBAAmB,GAAGC,IAAI,CAACC,IAAI,CAAC,CAACL,GAAG,GAAGE,WAAW,IAAI,IAAI,CAAC;EAEjE,IAAIC,mBAAmB,GAAG,EAAE,EAAE;IAC5B,OAAQ,GAAEA,mBAAoB,cAAa;EAC7C,CAAC,MAAM,IAAIA,mBAAmB,GAAG,IAAI,EAAE;IACrC,OAAQ,GAAEC,IAAI,CAACC,IAAI,CAACF,mBAAmB,GAAG,EAAE,CAAE,cAAa;EAC7D,CAAC,MAAM,IAAIA,mBAAmB,GAAG,KAAK,EAAE;IACtC,OAAQ,GAAEC,IAAI,CAACC,IAAI,CAACF,mBAAmB,GAAG,IAAI,CAAE,YAAW;EAC7D,CAAC,MAAM,IAAIA,mBAAmB,GAAG,OAAO,EAAE;IACxC,OAAQ,GAAEC,IAAI,CAACC,IAAI,CAACF,mBAAmB,GAAG,KAAK,CAAE,WAAU;EAC7D,CAAC,MAAM,IAAIA,mBAAmB,GAAG,QAAQ,EAAE;IACzC,OAAQ,GAAEC,IAAI,CAACC,IAAI,CAACF,mBAAmB,GAAG,OAAO,CAAE,aAAY;EACjE,CAAC,MAAM;IACL,OAAQ,GAAEC,IAAI,CAACC,IAAI,CAACF,mBAAmB,GAAG,QAAQ,CAAE,YAAW;EACjE;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}